<a @attributes="this.Attributes"
   @onclick="this.AnchorOnClickAsync"
   @onclick:preventDefault="@this.preventDefault">
    @this.ChildContent
</a>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> Attributes { get; set; } = new Dictionary<string, object>();


    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [Inject]
    protected IJSRuntime JSRuntime { get; set; } = null!;

    private Lazy<Task<IJSObjectReference>> _moduleTask = null!;
    private string targetId = string.Empty;
    private bool preventDefault = false;

    protected override void OnInitialized()
    {
        _moduleTask = new(
            () => JSRuntime.InvokeAsync<IJSObjectReference>(
                "import",
                "./js/anchor-link.js"
            ).AsTask()
        );
    }

    protected override void OnParametersSet()
    {
        string href = string.Empty;
        if (this.Attributes.ContainsKey("href"))
        {
            // If the href attribute has been specified, we examine the value of it. If if starts with '#'
            // we assume the rest of the value contains the ID of the element the link points to.
            href = $"{this.Attributes["href"]}";
            if (href.StartsWith("#"))
            {
                // If the href contains an anchor link we don't want the default click action to occur, but
                // rather take care of the click in our own method.
                this.targetId = href.Substring(1);
                this.preventDefault = true;
            }
        }
        base.OnParametersSet();
    }

    private async Task AnchorOnClickAsync()
    {
        if (!string.IsNullOrEmpty(this.targetId))
        {
            // If the target ID has been specified, we know this is an anchor link that we need to scroll
            // to, so we call the JavaScript method to take care of this for us.
            var module = await _moduleTask.Value;
            await module.InvokeVoidAsync(
                "scrollIntoView",
                this.targetId
            );
        }
    }
}
