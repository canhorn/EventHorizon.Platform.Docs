@using EventHorizon.Platform.Docs.Shared.Components.NavTreeView
@using EventHorizon.Platform.Docs.Shared.Components.NavTreeView.Model
@using EventHorizon.Platform.Docs.Localization
@using EventHorizon.Platform.Docs.Localization.Api

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">EventHorizon.Platform.Docs</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="main-nav @NavMenuCssClass">

    @foreach (var node in NavigationTreeView.Children)
    {
        <NavTreeView Root="node"
                     OnNodeClicked="HandleNodeClicked" />
    }

</div>

@code {
    [Inject]
    public Localizer<SharedResource> Localizer { get; set; } = null!;
    [Inject]
    public PageMetadataRepository Repository { get; set; }

    private NavTreeViewNodeData NavigationTreeView { get; set; } = null!;
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override void OnInitialized()
    {
        NavigationTreeView = BuildEditorTreeViewNode(
            null,
            Repository.Nav(),
            new List<NavTreeViewNodeData>()
        );
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void HandleNodeClicked(
        NavTreeViewNodeData node
    )
    {
        if (!node.Children?.Any() ?? true)
        {
            ToggleNavMenu();
        }
    }

    private NavTreeViewNodeData BuildEditorTreeViewNode(
        NavTreeViewNodeData existingTreeView,
        PageNavigation model,
        IEnumerable<NavTreeViewNodeData> expandedList
    )
    {
        return new NavTreeViewNodeData
        {
            Id = model.Id,
            Name = model.Title,
            Text = Localizer[model.Title],
            Href = !model.IsFolder ? model.Route : null,
            IsDisabled = model.IsFolder && (model.Children == null || !model.Children.Any()),
            IconCssClass = null, //"--icon oi oi-" + (model.IsFolder ? "folder" : "file"),
            Children = model.Children?.Select(
                childNode => BuildEditorTreeViewNode(
                    existingTreeView,
                    childNode,
                    expandedList
                )
            ).OrderBy(a => a.Text).ToList(),
            IsExpanded = GetExistingValueOrDefault(
                existingTreeView?.Children ?? new List<NavTreeViewNodeData>(),
                model.Id
            ) || GetExistingValueOrDefault(
                expandedList,
                model.Id
            )
        };
    }

    private bool GetExistingValueOrDefault(
        IEnumerable<NavTreeViewNodeData> nodeChildren,
        string nodeDataId
    )
    {
        foreach (var nodeData in nodeChildren)
        {
            if (nodeData.Id == nodeDataId)
            {
                return nodeData.IsExpanded;
            }
            if (nodeData.Children != null && nodeData.Children.Count > 0)
            {
                var result = GetExistingValueOrDefault(
                    nodeData.Children,
                    nodeDataId
                );
                if (result)
                {
                    return true;
                }
            }
        }
        return false;
    }
}
